#!/usr/bin/env sh

DEBUG=0

log_debug() {
    [ $DEBUG == 1 ] && echo $@
}

get_tmp_path() {
    mktemp -u -t epipe-XXXX
}

stop_emacs_proc() {
    log_debug "stop_emacs_proc: path to pipe: $PATH_TO_PIPE"
    PATH_TO_PIPE="$1"
    emacsclient --eval "(emacspipe--stop-proc \"$PATH_TO_PIPE\")" # \"$BUFFER_NAME\")"
    log_debug "stop_emacs_proc_done"
}

start_emacs_proc() {
    PATH_TO_PIPE="$1"
    BUFFER_NAME="${2:-*epipe $(date +%s)*}"
    log_debug "start_emacs_proc: path to pipe: $PATH_TO_PIPE"
    emacsclient --eval "(emacspipe--add-proc \"$PATH_TO_PIPE\")" # \"$BUFFER_NAME\")"
    log_debug "start_emacs_proc_done"
}

stream_pipe() {
    log_debug "stream_pipe"
    PATH_TO_PIPE="$(get_tmp_path)"
    log_debug "pipe path at $PATH_TO_PIPE"
    trap 'stop_emacs_proc $PATH_TO_PIPE' EXIT
    log_debug "trap set"
    start_emacs_proc "$PATH_TO_PIPE"
    log_debug "emacs proc started"
    while read -r line; do
        log_debug "read line: $line"
        echo "$line" | base64
    done | socat - "UNIX-CONNECT:$PATH_TO_PIPE"
    log_debug "pipe closed"
    log_debug "stream_pipe done"
}

output_pipe() {
    # emacspipe: Pipe output to an Emacs buffer.
    log_debug "output_pipe"
    # Default buffer name if none provided, with a unique identifier.
    BUFFER_NAME="${1:-*emacspipe $(date +%s)*}"

    # Read from stdin and escape double quotes and backslashes.
    OUTPUT=$(cat - | sed 's/\\/\\\\/g' | sed 's/\"/\\\"/g')

    # echo --eval "(emacspipe-receive \"$(echo "$OUTPUT" | base64)\" \"$BUFFER_NAME\")"
    # Use emacsclient to pass the output to an Emacs function.
    # We use base64 to encode the output to avoid issues with special characters.
    emacsclient --eval "(emacspipe-receive \"$(echo "$OUTPUT" | base64)\" \"$BUFFER_NAME\")"
    log_debug "output_pipe done"
}

main() {
    log_debug "main"
    if [ "$1" = "-s" ]; then
        stream_pipe
    else
        output_pipe "$@"
    fi
    log_debug "main done"
}

main "$@"
